#基础信息配置
spring.application.name=api-gateway
server.port=2006
#路由规则配置
zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.serviceId=feign-consumer

# 上述映射规则可用   zuul.routes.feign-consumer=/api-a/**  来代替
# zuul.routes后面跟着的是服务名，服务名后面跟着的是路径规则，这种配置方式显然更简单。

## 系统默认的映射规则
## zuul.routes.feign-consumer.path=/feign-consumer/**
## zuul.routes.feign-consumer.serviceId=feign-consumer

# API网关也将作为一个服务注册到eureka-server上
eureka.client.service-url.defaultZone=http://localhost:1111/eureka/

## 我们在这里配置了路由规则所有符合/api-a/**的请求都将被转发到feign-consumer服务上，至于feign-consumer服务的地址到底是什么则由eureka-server去分析，我们这里只需要写上服务名即可
## 以上面的配置为例,如果请求的是http://localhosst:2006/api-a/hello1 接口则相当于请求http://localhost:2005/hello1
## 这里feign-consumer的地址为http://localhost:2005,我们在路由规则中配置的api-a的路由的名字,可以任意定义,但是一组path和serviceId映射管理的路由名要相同

## 默认情况下，Eureka上所有注册的服务都会被Zuul创建映射关系来进行路由，但是对于我这里的例子来说，我希望提供服务的是feign-consumer，
## hello-service作为服务提供者只对服务消费者提供服务，不对外提供服务，如果使用默认的路由规则，则Zuul也会自动为hello-service创建映射规则，
## 这个时候我们可以采用如下方式来让Zuul跳过hello-service服务，不为其创建路由规则：
zuul.ignored-services=hello-service

# 不为/hello接口路由,比如:
zuul.ignored-patterns=/**/hello/**

# 统一为路由规则增加前缀
zuul.prefix=/myapi

## 此时我们的访问路径就变成了http://localhost:2006/myapi/feign-consumer/hello1

# 配置zuul本地跳转
zuul.routes.local.path=/local/**
zuul.routes.local.url=forward:/local

## 在zuul中,ribbon和hystrix的配置和他们本身的配置一样
# 关闭hystrix的重试机制(全局)
zuul.retryable=false

# 关闭某一个服务的重试机制
zuul.routes.feign-consumer.retryable=false














